{"uid":"d42e16dbfe855d8e","name":"待办列表新增待办，选择日期，时间选无，并且进行编辑","fullName":"aircases.test_agent.air.test_agent#test_add_agent_no_time_and_edit","historyId":"de11680e2666759e3cac300478ae8d5e","time":{"start":1750989737135,"stop":1750989828108,"duration":90973},"description":"待办列表新增待办，选择日期，时间选无，并且进行编辑","descriptionHtml":"<p>待办列表新增待办，选择日期，时间选无，并且进行编辑</p>\n","status":"broken","statusMessage":"IndexError: list index out of range","statusTrace":"@pytest.mark.testcase\n    @allure.title(\"待办列表新增待办，选择日期，时间选无，并且进行编辑\")\n    @allure.description(\"待办列表新增待办，选择日期，时间选无，并且进行编辑\")\n    def test_add_agent_no_time_and_edit():\n        poco(\"待办\").click()\n        poco(text=\"请在下方书写待办或点击此处新建待办\").click()\n        agent_name=\"这是一条没有时间的代办\"\n        text(agent_name,enter=False)\n        #删除时间\n        if poco(\"clean\").exists():\n            poco(\"clean\").click()\n        # poco(\"clean\").click()\n        poco(text=\"确认\").click()\n        #切换列表视图\n        poco(text=\"列表视图\").click()\n        #修改代办的年月日\n        agents = poco(\"androidx.compose.ui.platform.ComposeView\")\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")[7]\\\n        .children()\n        for i  in range(len(agents)):\n            if agents[i].get_text() == agent_name:\n                agents[i].click()\n                break\n        #点击编辑年月日\n        poco(\"date\").click()\n        poco(\"切换为选择年份\").click()\n        #切换年份\n        poco(\"android.widget.FrameLayout\")\\\n        .offspring(\"android.view.ViewGroup\")\\\n        .child(\"android.view.View\")\\\n        .offspring(\"android.widget.ScrollView\")\\\n        .child(\"android.view.View\")[0]\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")[1]\\\n        .child(\"android.view.View\")\\\n        .child(\"android.widget.TextView\")[8]\\\n        .child(\"android.view.View\").click()\n        touch((685,828))\n        poco(text=\"确认\").click()\n        poco(text=\"确认\").click()\n        #删除新增的代办\n>       find_del_agent(agent_name)\n\naircases\\test_agent.air\\test_agent.py:478: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\commen.py:133: in find_del_agent\n    if poco(\"androidx.compose.ui.platform.ComposeView\") \\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View[6]/\"\nitem = 16\n\n    def __getitem__(self, item):\n        \"\"\"\n        Select the specific UI element by index. If this UI proxy represents a set of UI elements, then use this method\n        to access the specific UI element. The new UI element will be wrapped by UIObjectProxy instance and therefore\n        the returned value is also the UI proxy object.\n    \n        The order of UI elements are determined by their position on the screen and not by the selection sequence. This\n        rule is called  \"L2R U2D\" (one by one from left to right, line by line from up to down), i.e. the most top left\n        UI element is always the first one. See ``IterationOverUI`` for more details.\n    \n        Warnings:\n            This method may cause some performance issues depending on implementation of PocoAgent.\n    \n        Args:\n            item (:obj:`int`): the index.\n    \n        Returns:\n            :py:class:`UIObjectProxy <poco.proxy.UIObjectProxy>`: a new UI proxy object representing the n-th of the\n            current UI elements.\n        \"\"\"\n    \n        if not self._query_multiple:\n            nodes = self._do_query(multiple=True, refresh=True)\n        else:\n            nodes = self._nodes\n        length = len(nodes)\n        if not self._sorted_children:\n            self._sorted_children = []\n            for i in range(length):\n                uiobj = UIObjectProxy(self.poco)\n                uiobj.query = ('index', (self.query, i))\n                uiobj._evaluated = True\n                uiobj._query_multiple = True\n                uiobj._nodes = nodes[i]\n                uiobj._nodes_proxy_is_list = False\n                pos = uiobj.get_position()\n                self._sorted_children.append((uiobj, pos))\n    \n        self._sorted_children.sort(key=lambda v: (v[1][1], v[1][0]))\n>       return self._sorted_children[item][0]\nE       IndexError: list index out of range\n\n.venv\\Lib\\site-packages\\poco\\proxy.py:250: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"待办列表新增待办，选择日期，时间选无，并且进行编辑","status":"broken","statusMessage":"IndexError: list index out of range","statusTrace":"@pytest.mark.testcase\n    @allure.title(\"待办列表新增待办，选择日期，时间选无，并且进行编辑\")\n    @allure.description(\"待办列表新增待办，选择日期，时间选无，并且进行编辑\")\n    def test_add_agent_no_time_and_edit():\n        poco(\"待办\").click()\n        poco(text=\"请在下方书写待办或点击此处新建待办\").click()\n        agent_name=\"这是一条没有时间的代办\"\n        text(agent_name,enter=False)\n        #删除时间\n        if poco(\"clean\").exists():\n            poco(\"clean\").click()\n        # poco(\"clean\").click()\n        poco(text=\"确认\").click()\n        #切换列表视图\n        poco(text=\"列表视图\").click()\n        #修改代办的年月日\n        agents = poco(\"androidx.compose.ui.platform.ComposeView\")\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")[7]\\\n        .children()\n        for i  in range(len(agents)):\n            if agents[i].get_text() == agent_name:\n                agents[i].click()\n                break\n        #点击编辑年月日\n        poco(\"date\").click()\n        poco(\"切换为选择年份\").click()\n        #切换年份\n        poco(\"android.widget.FrameLayout\")\\\n        .offspring(\"android.view.ViewGroup\")\\\n        .child(\"android.view.View\")\\\n        .offspring(\"android.widget.ScrollView\")\\\n        .child(\"android.view.View\")[0]\\\n        .child(\"android.view.View\")\\\n        .child(\"android.view.View\")[1]\\\n        .child(\"android.view.View\")\\\n        .child(\"android.widget.TextView\")[8]\\\n        .child(\"android.view.View\").click()\n        touch((685,828))\n        poco(text=\"确认\").click()\n        poco(text=\"确认\").click()\n        #删除新增的代办\n>       find_del_agent(agent_name)\n\naircases\\test_agent.air\\test_agent.py:478: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\commen.py:133: in find_del_agent\n    if poco(\"androidx.compose.ui.platform.ComposeView\") \\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"androidx.compose.ui.platform.ComposeView/android.view.View/android.view.View/android.view.View[6]/\"\nitem = 16\n\n    def __getitem__(self, item):\n        \"\"\"\n        Select the specific UI element by index. If this UI proxy represents a set of UI elements, then use this method\n        to access the specific UI element. The new UI element will be wrapped by UIObjectProxy instance and therefore\n        the returned value is also the UI proxy object.\n    \n        The order of UI elements are determined by their position on the screen and not by the selection sequence. This\n        rule is called  \"L2R U2D\" (one by one from left to right, line by line from up to down), i.e. the most top left\n        UI element is always the first one. See ``IterationOverUI`` for more details.\n    \n        Warnings:\n            This method may cause some performance issues depending on implementation of PocoAgent.\n    \n        Args:\n            item (:obj:`int`): the index.\n    \n        Returns:\n            :py:class:`UIObjectProxy <poco.proxy.UIObjectProxy>`: a new UI proxy object representing the n-th of the\n            current UI elements.\n        \"\"\"\n    \n        if not self._query_multiple:\n            nodes = self._do_query(multiple=True, refresh=True)\n        else:\n            nodes = self._nodes\n        length = len(nodes)\n        if not self._sorted_children:\n            self._sorted_children = []\n            for i in range(length):\n                uiobj = UIObjectProxy(self.poco)\n                uiobj.query = ('index', (self.query, i))\n                uiobj._evaluated = True\n                uiobj._query_multiple = True\n                uiobj._nodes = nodes[i]\n                uiobj._nodes_proxy_is_list = False\n                pos = uiobj.get_position()\n                self._sorted_children.append((uiobj, pos))\n    \n        self._sorted_children.sort(key=lambda v: (v[1][1], v[1][0]))\n>       return self._sorted_children[item][0]\nE       IndexError: list index out of range\n\n.venv\\Lib\\site-packages\\poco\\proxy.py:250: IndexError","steps":[],"attachments":[{"uid":"50fcc16865b7d0cd","name":"log","source":"50fcc16865b7d0cd.txt","type":"text/plain","size":242}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"epic","value":"办公本v2.4.0"},{"name":"feature","value":"代办模块用例"},{"name":"tag","value":"testcase"},{"name":"parentSuite","value":"aircases.test_agent.air"},{"name":"suite","value":"test_agent"},{"name":"host","value":"DESKTOP-P9LT7L8"},{"name":"thread","value":"8036-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"aircases.test_agent.air.test_agent"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["testcase"]},"source":"d42e16dbfe855d8e.json","parameterValues":[]}